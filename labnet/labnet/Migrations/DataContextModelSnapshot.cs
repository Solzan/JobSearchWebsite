// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using labnet.EntityFramework;

namespace labnet.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("labnet.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new { Id = 12, Name = "Google" },
                        new { Id = 13, Name = "Netflix" },
                        new { Id = 14, Name = "Danone" }
                    );
                });

            modelBuilder.Entity("labnet.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ContactAgreement");

                    b.Property<string>("CvUrl");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<int?>("JobOfferId");

                    b.Property<string>("LastName");

                    b.Property<int>("OfferId");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("labnet.Models.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("JobDescription");

                    b.Property<string>("JobTitle")
                        .IsRequired();

                    b.Property<string>("Location");

                    b.Property<int?>("SalaryFrom")
                        .IsRequired();

                    b.Property<int?>("SalaryTo")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("JobOfers");

                    b.HasData(
                        new { Id = 8, Company = "Sharlotta", EndDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), JobDescription = "We are looking for cooker", JobTitle = "Cooker", Location = "Warszaw", SalaryFrom = 8000, SalaryTo = 10000, StartDate = new DateTime(2020, 1, 16, 1, 13, 35, 456, DateTimeKind.Local) },
                        new { Id = 9, Company = "Netflix", EndDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), JobDescription = "We are looking for Designer", JobTitle = "Designer", Location = "New York", SalaryFrom = 18000, SalaryTo = 20000, StartDate = new DateTime(2020, 1, 16, 1, 13, 35, 459, DateTimeKind.Local) },
                        new { Id = 10, Company = "Netflix", EndDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), JobDescription = "We are looking for manager", JobTitle = "Manager", Location = "New York", SalaryFrom = 16000, SalaryTo = 19000, StartDate = new DateTime(2020, 1, 16, 1, 13, 35, 459, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("labnet.Models.JobApplication", b =>
                {
                    b.HasOne("labnet.Models.JobOffer")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobOfferId");
                });
#pragma warning restore 612, 618
        }
    }
}
